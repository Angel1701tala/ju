package gatoRatonAlpaha;

import java.util.Scanner;

public class GatoRatonAlphaBeta {
    private static final int TAMANO_TABLERO = 3;
    private static final char GATO = 'X';
    private static final char RATON = 'O';
    private static final char VACIO = ' ';

    public static void main(String[] args) {
        char[][] tablero = new char[TAMANO_TABLERO][TAMANO_TABLERO];
        inicializarTablero(tablero);

        Scanner scanner = new Scanner(System.in);
        System.out.println("Bienvenido al juego del Gato y el Ratón!");
        System.out.println("¿Quién empieza? (1 para gato, 2 para ratón):");
        int jugadorInicial = scanner.nextInt();

        boolean turnoGato = (jugadorInicial == 1);

        while (!esFinJuego(tablero)) {
            imprimirTablero(tablero);

            if (turnoGato) {
                System.out.println("Turno del gato (X).");
                realizarMovimientoGato(tablero);
            } else {
                System.out.println("Turno del ratón (O).");
                realizarMovimientoRaton(tablero);
            }

            turnoGato = !turnoGato;
        }

        imprimirTablero(tablero);
        char ganador = obtenerGanador(tablero);
        if (ganador == GATO) {
            System.out.println("¡El gato (X) ha ganado!");
        } else if (ganador == RATON) {
            System.out.println("¡El ratón (O) ha ganado!");
        } else {
            System.out.println("¡Empate!");
        }
    }

    private static void inicializarTablero(char[][] tablero) {
        for (int i = 0; i < TAMANO_TABLERO; i++) {
            for (int j = 0; j < TAMANO_TABLERO; j++) {
                tablero[i][j] = VACIO;
            }
        }
    }

    private static void imprimirTablero(char[][] tablero) {
        for (int i = 0; i < TAMANO_TABLERO; i++) {
            for (int j = 0; j < TAMANO_TABLERO; j++) {
                System.out.print(tablero[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private static void realizarMovimientoGato(char[][] tablero) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Ingrese la fila y columna para el movimiento (ejemplo: 1 2):");
            int fila = scanner.nextInt();
            int columna = scanner.nextInt();

            if (fila >= 0 && fila < TAMANO_TABLERO && columna >= 0 && columna < TAMANO_TABLERO &&
                    tablero[fila][columna] == VACIO) {
                tablero[fila][columna] = GATO;
                break;
            } else {
                System.out.println("Movimiento inválido. Inténtelo nuevamente.");
            }
        }
    }

    private static void realizarMovimientoRaton(char[][] tablero) {
        int[] movimiento = alphaBeta(tablero, 9, Integer.MIN_VALUE, Integer.MAX_VALUE, true);
        tablero[movimiento[1]][movimiento[2]] = RATON;
    }

    private static int[] alphaBeta(char[][] tablero, int profundidad, int alpha, int beta, boolean maximizando) {
        if (profundidad == 0 || esFinJuego(tablero)) {
            int evaluacion = evaluarTablero(tablero);
            return new int[] { evaluacion, -1, -1 };
        }

        if (maximizando) {
            int maxEval = Integer.MIN_VALUE;
            int mejorFila = -1;
            int mejorColumna = -1;

            for (int i = 0; i < TAMANO_TABLERO; i++) {
                for (int j = 0; j < TAMANO_TABLERO; j++) {
                    if (tablero[i][j] == VACIO) {
                        tablero[i][j] = RATON;
                        int eval = alphaBeta(tablero, profundidad - 1, alpha, beta, false)[0];
                        tablero[i][j] = VACIO;

                        if (eval > maxEval) {
                            maxEval = eval;
                            mejorFila = i;
                            mejorColumna = j;
                        }

                        alpha = Math.max(alpha, eval);
                        if (beta <= alpha) {
                            break;
                        }
                    }
                }
            }

            return new int[] { maxEval, mejorFila, mejorColumna };
        } else {
            int minEval = Integer.MAX_VALUE;
            int mejorFila = -1;
            int mejorColumna = -1;

            for (int i = 0; i < TAMANO_TABLERO; i++) {
                for (int j = 0; j < TAMANO_TABLERO; j++) {
                    if (tablero[i][j] == VACIO) {
                        tablero[i][j] = GATO;
                        int eval = alphaBeta(tablero, profundidad - 1, alpha, beta, true)[0];
                        tablero[i][j] = VACIO;

                        if (eval < minEval) {
                            minEval = eval;
                            mejorFila = i;
                            mejorColumna = j;
                        }

                        beta = Math.min(beta, eval);
                        if (beta <= alpha) {
                            break;
                        }
                    }
                }
            }

            return new int[] { minEval, mejorFila, mejorColumna };
        }
    }

    private static boolean esFinJuego(char[][] tablero) {
        return hayGanador(tablero) || tableroLleno(tablero);
    }

    private static boolean tableroLleno(char[][] tablero) {
        for (int i = 0; i < TAMANO_TABLERO; i++) {
            for (int j = 0; j < TAMANO_TABLERO; j++) {
                if (tablero[i][j] == VACIO) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean hayGanador(char[][] tablero) {
        return hayGanadorEnFilas(tablero) || hayGanadorEnColumnas(tablero) || hayGanadorEnDiagonales(tablero);
    }

    private static boolean hayGanadorEnFilas(char[][] tablero) {
        for (int i = 0; i < TAMANO_TABLERO; i++) {
            if (tablero[i][0] != VACIO && tablero[i][0] == tablero[i][1] && tablero[i][0] == tablero[i][2]) {
                return true;
            }
        }
        return false;
    }

    private static boolean hayGanadorEnColumnas(char[][] tablero) {
        for (int j = 0; j < TAMANO_TABLERO; j++) {
            if (tablero[0][j] != VACIO && tablero[0][j] == tablero[1][j] && tablero[0][j] == tablero[2][j]) {
                return true;
            }
        }
        return false;
    }

    private static boolean hayGanadorEnDiagonales(char[][] tablero) {
        if (tablero[0][0] != VACIO && tablero[0][0] == tablero[1][1] && tablero[0][0] == tablero[2][2]) {
            return true;
        }

        if (tablero[0][2] != VACIO && tablero[0][2] == tablero[1][1] && tablero[0][2] == tablero[2][0]) {
            return true;
        }

        return false;
    }

    private static char obtenerGanador(char[][] tablero) {
        if (hayGanadorEnFilas(tablero)) {
            for (int i = 0; i < TAMANO_TABLERO; i++) {
                if (tablero[i][0] != VACIO && tablero[i][0] == tablero[i][1] && tablero[i][0] == tablero[i][2]) {
                    return tablero[i][0];
                }
            }
        }

        if (hayGanadorEnColumnas(tablero)) {
            for (int j = 0; j < TAMANO_TABLERO; j++) {
                if (tablero[0][j] != VACIO && tablero[0][j] == tablero[1][j] && tablero[0][j] == tablero[2][j]) {
                    return tablero[0][j];
                }
            }
        }

        if (hayGanadorEnDiagonales(tablero)) {
            if (tablero[0][0] != VACIO && tablero[0][0] == tablero[1][1] && tablero[0][0] == tablero[2][2]) {
                return tablero[0][0];
            }

            if (tablero[0][2] != VACIO && tablero[0][2] == tablero[1][1] && tablero[0][2] == tablero[2][0]) {
                return tablero[0][2];
            }
        }

        return VACIO;
    }

    private static int evaluarTablero(char[][] tablero) {
        if (hayGanador(tablero)) {
            char ganador = obtenerGanador(tablero);
            if (ganador == GATO) {
                return 10;
            } else if (ganador == RATON) {
                return -10;
            }
        }
        return 0;
    }
}
